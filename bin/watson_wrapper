#!/bin/bash

# A wrapper script for watson, the time tracking tool

function notify() {
    # if [ -n "$DISPLAY" ]; then
    #     notify-send "$*"
    # else
    #     echo "$*" 1>&2 ;
    # fi
    echo "$*" 1>&2 ;
}

function die() {
    notify "$*"
    exit 1;
}

WATSON=$(which watson)
if [ -z "$WATSON" ]; then
    # Workaround for pip installation
    WATSON_FALLBACK="$HOME/.local/bin/watson"
    if [ -x "$WATSON_FALLBACK" ]; then
        WATSON=$WATSON_FALLBACK;
    else
        die "watson not found"
    fi
fi

# Specify which "choose" program to use, depending on environment
# TODO allow to type a new value not in the choice list?
CHOOSE_APP_NAME=rofi
CHOOSE_APP_ARGS="-dmenu"
# if ! xset q &>/dev/null; then
    # No X server running: use fzf in termnal
    CHOOSE_APP_NAME=fzf
    CHOOSE_APP_ARGS=
# fi
# Verify that it is installed and available in the PATH
CHOOSE=$(which $CHOOSE_APP_NAME)
if [ -z "$CHOOSE" ]; then
    die "$CHOOSE_APP_NAME not found"
fi
CHOOSE="$CHOOSE $CHOOSE_APP_ARGS"



# When invoked without arguments, the behavior depends on current state:
# 1) If a project is currently being tracked, stop it.
# 2) Otherwise, open rofi to choose from a previous project or type in a new one.
if [ $# -eq 0 ]; then
    WSTATUS=$($WATSON status -p)
    if [ "$WSTATUS" != "No project started." ]; then
        PROJECT=$($WATSON status -p)
        STOP_OUTPUT=$($WATSON stop)
        [ $? -eq 0 ] || die "Failed to stop project: $STOP_OUTPUT"
        # Ask for a description for the CSV file
        if xset q &>/dev/null; then
            # TODO also ask for description without X
            # ignore certain projects
            case $PROJECT in
                moonraker|planning|review|defect-duty) RESPONSE="";;
                *)
                    DESC_FILE=$HOME/notes/watson/descriptions.csv
                    RESPONSE=$(zenity --entry --title "Description" --text "Describe what you just did for $PROJECT")
                    RETCODE=$?
                    if [ $RETCODE -ne 0 ]; then
                        die "could not get description"
                    fi
                    ;;
            esac
            # output to file and check
            if [ -n "$RESPONSE" ]; then
                LAST_ID=$($WATSON frames | tail -n 1)
                LINE=$LAST_ID',"'$RESPONSE'"'
                echo $LINE >> $DESC_FILE
                # check that line was added
                LAST_LINE=$(tail -n 1 $DESC_FILE)
                if [ "$LAST_LINE" != "$LINE" ]; then
                    die "ERROR: capture failed! line not found"
                fi
            fi
        fi
        notify "$STOP_OUTPUT"
    else
        # TODO cannot add tags
        NEW_PROJECT=$($WATSON projects | $CHOOSE)
        # Rofi returned non-zero: probably nothing picked (Esc or Ctrl+C)
        [ $? -eq 0 ] || exit 0
        # Start new project
        START_OUTPUT=$($WATSON start $NEW_PROJECT)
        [ $? -eq 0 ] || die "Failed to stop project: $STOP_OUTPUT"
        notify "$START_OUTPUT"
    fi
    # TODO send notification to i3blocks to change status immediately
    # We're done now, bye
    exit 0;
fi

# Wrapper for more compact status output
if [ $# -eq 1 ] && [ "$1" == "status" ]; then
    WSTATUS=$($WATSON status)
    if [ "$WSTATUS" == "No project started." ]; then
        echo "no project "
    else
        echo -n $($WATSON status -p) "- "
        echo -n $($WATSON status -e)
        echo " "
    fi
    exit 0
fi

# Print daily log and report for my weekly notes
if [ $# -ge 1 ] && [ "$1" == "daily" ]; then
    # Extract date argument
    DAY=$(date +%Y-%m-%d)
    if [ $# -ge 2 ]; then
        # This allows to pass strings like "yesterday" or "last Friday"
        DAY=$(date --date="$2" +%Y-%m-%d)
    fi
    date -d "$DAY" > /dev/null || die "Invalid date: $DAY"

    # Print daily report in my own markdown format
    echo "## Log"
    $WATSON log --no-pager -f "$DAY" -t "$DAY" --no-current | cut -f1 -d' ' --complement | sed -e 's/^ /### /'
    echo "## Report"
    # TODO sort by duration
    watson report --no-pager -f "$DAY" -t "$DAY" --no-current | grep " - " | awk 'BEGIN{FS=" - "} {gsub(" ", "", $2); print "###", $1, "-", substr($2,0,length($2)-3)}'
    exit 0
fi


# If nothing matched, just run watson
$WATSON "$@"
exit $?
