#! /usr/bin/env bash
# Strict mode, for bash help see https://devhints.io/bash
set -euo pipefail
IFS=$'\n\t'

#---------------------------------------------------------------------------
# Setup
function show_help(){
   echo "Usage: $0  <debug|release>"
   exit 1
}

EXTRA_CMAKE_FLAGS=""
if [[ "$(cmake --version)" =~ "cmake version 3.19" ]]; then
    EXTRA_CMAKE_FLAGS="-DCMAKE_OPTIMIZE_DEPENDENCIES=1"
fi

# Read optional arguments
while [[ "$#" -gt 0 &&  "$1" =~ ^- ]]; do case $1 in
  -h | --help ) show_help ;;
  *) echo "Unknown parameter passed: $1"; exit 1 ;;
esac; shift; done
# Read positional arguments
if [[ ! "$#" -eq 1 ]]; then
   show_help
fi
type=$1
case $type in
  "debug")
     if [[ -e ./debug ]]; then
        echo "debug dir already exists"
        exit 1;
     fi
     mkdir debug
     pushd debug
     cmake -G "Ninja" \
         -DCMAKE_BUILD_TYPE=Debug \
         -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
         -DCMAKE_DOCUMENTATION_LEVEL=Internal \
         -DUSING_CCACHE:BOOL=ON \
         -DUSING_CCACHE_SHARE_DIRS:BOOL=ON \
         -DHYPER_RESET_CCACHE_FOLDER_SIZE:BOOL=OFF \
         -DHYPER_SEPARATE_DEBUG_SYMBOLS:BOOL=OFF \
         -DHYPER_SKIP_FCFS:BOOL=OFF \
          $EXTRA_CMAKE_FLAGS \
         ..
     popd
     ln -s debug/compile_commands.json
     ;;
  "release")
      if [[ -e ./release ]]; then
         echo "release dir already exists"
         exit 1;
      fi
      mkdir release
      pushd release
      cmake -G "Ninja" \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON \
          -DCMAKE_DOCUMENTATION_LEVEL=Internal \
          -DUSING_CCACHE:BOOL=ON \
          -DUSING_CCACHE_SHARE_DIRS:BOOL=ON \
          -DHYPER_RESET_CCACHE_FOLDER_SIZE:BOOL=OFF \
          -DHYPER_SKIP_FCFS:BOOL=OFF \
          $EXTRA_CMAKE_FLAGS \
          ..
      popd
      # prefer the debug version of compile commands
      if [ ! -f compile_commands.json ]; then
          ln -s release/compile_commands.json
      fi
      ;;
  *)
     show_help
     ;;
esac
