" vimrc for hyper-specific settings

" indentation length in hyper is 3
set softtabstop=3
set shiftwidth=3
" except in python where it's 4
autocmd FileType python setlocal shiftwidth=4
autocmd FileType python setlocal softtabstop=4

" don't wrap, since hyper has very long lines
set nowrap

" Do not trigger YCM unless explicitly invoked
let g:ycm_auto_trigger = 0

" :CMakeToggle -- a command to toggle a variable g:cmake_target_dir between "debug" and "release"
if (!exists("g:cmake_target_dir"))
   let g:cmake_target_dir = "release"
endif
func! MyFuncCMakeToggle()
   if g:cmake_target_dir == "release"
      let g:cmake_target_dir = "debug"
   else
      let g:cmake_target_dir = "release"
   endif
   echo "CMake build dir is now: " . g:cmake_target_dir
endfunc
command! -nargs=0 CMakeToggle :call MyFuncCMakeToggle()

" TODO display cmake target dir and ninja focused target on status bar
" NinjaTargetSwitch -- changes the target used by NinjaCompile for more focused work
let g:ninja_targets = [ "all", "hyperd", "sqltest", "sql_hyper" , "learn", "tester_hyper"]
if (!exists("g:current_ninja_target_index"))
   let g:current_ninja_target_index = 0
endif
func! GetCurrentCMakeTarget()
    return g:ninja_targets[g:current_ninja_target_index]
endfunc
" TODO there should be a const list of targets and this function just flips
" rotates through the index on that list
func! MyFuncNinjaTargetSwitch()
   if (g:current_ninja_target_index < (len(g:ninja_targets) - 1))
       let g:current_ninja_target_index = g:current_ninja_target_index + 1
   else
       let g:current_ninja_target_index = 0
   endif
   echo "Ninja target is now: " . GetCurrentCMakeTarget()
endfunc
command! -nargs=0 NinjaTargetSwitch :call MyFuncNinjaTargetSwitch()
nnoremap <leader>xt :NinjaTargetSwitch<cr>

" :NinjaCompile == sets the makeprg to ninja and calls it on a given target or globally
func! MyFuncNinjaCompile()
   exe 'set makeprg=ninja\ -C\ ' . g:cmake_target_dir
   execute 'Make ' . g:ninja_targets[g:current_ninja_target_index]
endfunc
command! -nargs=0 NinjaCompile :call MyFuncNinjaCompile()
nnoremap <leader>xc :update<cr> :NinjaCompile<cr>

" func! MyFuncRunHyperTests()
"    exe 'FocusDispatch cd ' . g:cmake_target_dir . ' && ctest --verbose'
"    :Dispatch!
" endfunc
" command! -nargs=0 RunHyperTests :call MyFuncRunHyperTests()
" nnoremap <leader>xt :RunHyperTests<cr>

" alternate between hpp and cpp using projectionist
" TODO right now, I consider the stweards json as identifier for the hyper dir
let g:projectionist_heuristics = {
      \ "hyper/&stewards.json": {
      \   "hyper/*.cpp": {"alternate": "hyper/include/hyper/{}.hpp"},
      \   "hyper/include/hyper/*.hpp": {"alternate": "hyper/{}.cpp"}
      \ }}
nnoremap <Leader>xa :A<CR>
