" vimrc for hyper-specific settings
set softtabstop=3
set shiftwidth=3

" don't wrap, since hyper has very long lines
set nowrap

let g:alternateSearchPath = 'reg:|dbcore|dbcore/include/dbcore|,reg:|dbcore/include/dbcore|dbcore|'

" let g:syntastic_cpp_checkers = ['clang_check', 'gcc']
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_cpp_clang_check_post_args = ""

" Do not trigger YCM unless explicitly invoked
let g:ycm_auto_trigger = 0

" Search by filename only instead of full path in CtrlP (<C-d> to switch)
let g:ctrlp_by_filename = 1

" :CMakeToggle -- a command to toggle a variable g:cmake_target_dir between "debug" and "release"
if (!exists("g:cmake_target_dir"))
   let g:cmake_target_dir = "release"
endif
func! MyFuncCMakeToggle()
   if g:cmake_target_dir == "release"
      let g:cmake_target_dir = "debug"
   else
      let g:cmake_target_dir = "release"
   endif
   echo "CMake build dir is now: " . g:cmake_target_dir
endfunc
command! -nargs=0 CMakeToggle :call MyFuncCMakeToggle()

func! MyFuncNinjaCompile()
   exe 'set makeprg=ninja\ -C\ ' . g:cmake_target_dir
   :Make
endfunc
command! -nargs=0 NinjaCompile :call MyFuncNinjaCompile()
nnoremap <leader>xc :NinjaCompile<cr>

func! MyFuncRunHyperTests()
   exe 'FocusDispatch cd ' . g:cmake_target_dir . ' && ctest --verbose'
   :Dispatch!
endfunc
command! -nargs=0 RunHyperTests :call MyFuncRunHyperTests()
nnoremap <leader>xt :RunHyperTests<cr>
